% Definen los operadores de la disyunción, negación, conjuncion,
% implicación y doble implicación.
% Donde op(Numero,Forma, Nombre) define sintacticamente el operador en
% cuestion de modo que forma define xfy si es infija y fx si prefija.
:- op(1150,xfy,or).  %Disjunction
:- op(1150,fx,neg).  %Negation
:- op(1150,xfy,and). %Conjuction
:- op(1150,xfy,impl).%Implication
:- op(1150,xfy,iff). %Double Implication

%Pasa a la forma normal disyuntiva cualquier tipo de formula que reciba.
%Donde dnf(A,A) son dos formulas.
dnf(A,A) :-atom(A).
dnf(neg A,neg C):- dnf(A,C).
dnf(A or B,C or D):- dnf(A,C),dnf(B,D).
dnf(A and B, neg((neg C) or (neg D))) :- dnf(A,C),dnf(B,D).
dnf(A impl B,(neg C) or D) :- dnf(A,C),dnf(B,D).
dnf(A iff B,C):- dnf((A impl B) and (B impl A),C).

% Se encarga de pasar a forma normal disyuntiva todos los elementos de
% la lista
% Primero se pasa a su forma normal disyuntiva las cabezas de la lista
% con el predicado dnf. Y despues recursivamente se llama asi mismo el
% algoritmo
% Donde DnfL([F|Fs],[G|Gs]) son 2 listas dividas por su cabeza y cola.
dnfL([],[]).
dnfL([F|Fs],[G|Gs]):- dnf(F,G),dnfL(Fs,Gs).

% Realiza el calculo de secuentes de una formula en forma normal
% disyuntiva
sc(I,D) :- not(intersection(I,D,[])).
sc([(neg F)|I],D) :- sc_aux(I,[F|D]).
sc(I,[(neg F)|D])  :- sc_aux([F|I],D).
sc(I,[(F1 or F2)|D]) :- union([F1,F2],D,D1),sc_aux(I,D1).
sc([(F1 or F2)|I],D)  :- sc_aux([F1|I],D),sc_aux([F2|I],D).

% Realiza una permutación de las formulas.
sc_aux(I,D):-permutation(I,I1),permutation(D,D1),sc(I1,D1).

% Dado una formula realiza todas los pasos visto antes desde pasa a su
% forma normal disyuntiva hasta realizar sus calculos de secuentes.
sc1(I,D) :-dnfL(I,I1),dnfL(D,D1),sc(I1,D1).
